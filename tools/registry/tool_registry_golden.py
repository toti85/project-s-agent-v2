"""
Project-S Tool Registry
---------------------
Ez a modul felel≈ës az eszk√∂z√∂k (tool-ok) kezel√©s√©√©rt √©s regisztr√°l√°s√°√©rt.
A rendszer k√∂zponti pontjak√©nt szolg√°l az el√©rhet≈ë eszk√∂z√∂k sz√°m√°ra.
"""

import os
import importlib
import inspect
import logging
import asyncio
from typing import Dict, Any, List, Optional, Set, Type, Union
import json
from pathlib import Path

from tools.tool_interface import BaseTool

# Import with fallback for infrastructure components
try:
    from core.infrastructure.event_bus import event_bus
    from core.infrastructure.error_handler import error_handler
except ImportError:
    # Mock for testing
    class MockEventBus:
        async def publish(self, event_type, data): pass
        def subscribe(self, event_type, handler): pass
    class MockErrorHandler:
        async def handle_error(self, error, context): return {"status": "error", "message": str(error)}
    event_bus = MockEventBus()
    error_handler = MockErrorHandler()

logger = logging.getLogger(__name__)

class ToolRegistry:
    """
    Eszk√∂z regisztr√°ci√≥ √©s kezel≈ë rendszer.
    Minden el√©rhet≈ë eszk√∂z itt ker√ºl regisztr√°l√°sra √©s innen √©rhet≈ë el.
    """
    
    def __init__(self):
        """Inicializ√°lja a tool registry-t."""
        self.tools: Dict[str, BaseTool] = {}
        self.tool_classes: Dict[str, Type[BaseTool]] = {}
        self.categories: Dict[str, Set[str]] = {}
          # Biztons√°gi be√°ll√≠t√°sok - FEJLESZT√âSI M√ìD: minden enged√©lyezve
        self.security_config = {
            "allow_system_commands": True,  # Enged√©lyezz√ºk a rendszerparancsokat
            "allow_file_write": True,
            "allow_network_access": True,
            "restricted_paths": [],  # √úres lista - nincs korl√°toz√°s
            "allowed_domains": ["*"],  # Enged√©lyezz√ºk az √∂sszes domaint
            "max_file_size": 100 * 1024 * 1024  # 100 MB - nagyobb limit
        }
        
        # Alap√©rtelmezett f√°jl el√©r√©si √∫tvonalak
        self.default_paths = {
            "downloads": Path(__file__).parent.parent / "downloads",
            "outputs": Path(__file__).parent.parent / "outputs",
            "temp": Path(__file__).parent.parent / "temp"
        }
        
        # L√©trehozzuk a sz√ºks√©ges mapp√°kat
        for path in self.default_paths.values():
            os.makedirs(path, exist_ok=True)
          # Esem√©ny feliratkoz√°sok
        event_bus.subscribe("tool.executed", self._on_tool_executed)
        event_bus.subscribe("security.violation", self._on_security_violation)
        
        # Biztons√°gi konfigur√°ci√≥ bet√∂lt√©se
        self.load_security_config()
        
        # Auto-register essential tools
        self._register_essential_tools()
        
        logger.info("Tool Registry inicializ√°lva")
        
    def _register_essential_tools(self):
        """Register essential tools directly."""
        try:
            # Import and register file tools
            from tools.file_tools import file_reader, file_writer, directory_lister
            self.tools["file_reader"] = file_reader
            self.tools["file_writer"] = file_writer
            self.tools["directory_lister"] = directory_lister
            
            # Import and register system tools
            from tools.system_tools import system_command, system_info, power_command
            self.tools["system_command"] = system_command
            self.tools["system_info"] = system_info
            self.tools["power_command"] = power_command
            
            # Import and register PDF generator
            from tools.pdf_generator import PDFGeneratorTool
            pdf_generator = PDFGeneratorTool()
            self.tools["pdf_generator"] = pdf_generator
            
            # Import and register Web Tools - ARCHAEOLOGICAL DISCOVERY + LEGACY COMPATIBILITY!
            try:
                from tools.implementations.web_tools import WebScraperTool, WebAnalyzerTool, WebPageFetchTool, WebApiCallTool, WebSearchTool
                
                # Advanced V2 tools
                web_scraper = WebScraperTool()
                web_analyzer = WebAnalyzerTool()
                
                # Legacy compatibility tools
                web_page_fetch = WebPageFetchTool()
                web_api_call = WebApiCallTool()
                web_search = WebSearchTool()
                
                # Register all web tools
                self.tools["web_scraper"] = web_scraper
                self.tools["web_analyzer"] = web_analyzer
                self.tools["web_page_fetch"] = web_page_fetch
                self.tools["web_api_call"] = web_api_call
                self.tools["web_search"] = web_search
                
                logger.info("üåê Web Tools Suite (V2 + Legacy Compatibility) successfully loaded!")
            except ImportError as e:
                logger.warning(f"Web Tools not available: {e}")
                
            # Import and register Browser Automation Tool (csak az alapvet≈ë verzi√≥)
            try:
                from tools.implementations.browser_automation_tool import BrowserAutomationTool
                browser_automation = BrowserAutomationTool()
                self.tools["browser_automation"] = browser_automation
                logger.info("üåê Browser Automation Tool successfully loaded!")
            except ImportError as e:
                logger.warning(f"Browser Automation Tool not available: {e}")
            
            # Update categories
            self.categories.setdefault("file", set()).update(["file_reader", "file_writer", "directory_lister", "pdf_generator"])
            self.categories.setdefault("system", set()).update(["system_command", "system_info", "power_command"])
            self.categories.setdefault("web", set()).update(["web_scraper", "web_analyzer", "web_page_fetch", "web_api_call", "web_search"])
            self.categories.setdefault("browser", set()).update(["browser_automation"])  # Csak az alapvet≈ë browser automation
            
            logger.info(f"Essential tools registered: {len(self.tools)} tools available")
            
        except ImportError as e:
            logger.warning(f"Could not import essential tools: {e}")
        except Exception as e:
            logger.error(f"Error registering essential tools: {e}")
        
    async def load_tools(self, tools_dir: Optional[str] = None) -> int:
        """
        Bet√∂lti az √∂sszes el√©rhet≈ë eszk√∂zt a megadott k√∂nyvt√°rb√≥l.
        
        Args:
            tools_dir: Opcion√°lis k√∂nyvt√°r √∫tvonal, alap√©rtelmezetten 'tools' mappa
            
        Returns:
            int: A bet√∂lt√∂tt eszk√∂z√∂k sz√°ma
        """
        if tools_dir is None:
            tools_dir = Path(__file__).parent
            
        tools_path = Path(tools_dir)
        loaded_count = 0
        
        # Csak a python f√°jlokat vessz√ºk figyelembe, kiv√©ve az __init__.py √©s interf√©sz f√°jlokat
        for file_path in tools_path.glob("**/*.py"):
            if file_path.name.startswith("__") or file_path.name == "tool_interface.py" or file_path.name == "tool_registry.py":
                continue
                
            relative_path = file_path.relative_to(Path(__file__).parent.parent)
            module_path = str(relative_path).replace("/", ".").replace("\\", ".").replace(".py", "")
            
            try:
                module = importlib.import_module(module_path)
                
                # Keress√ºk a BaseTool lesz√°rmazottjait a modulban
                for name, obj in inspect.getmembers(module):
                    if (inspect.isclass(obj) and 
                        issubclass(obj, BaseTool) and 
                        obj != BaseTool):
                        
                        # Csak akkor regisztr√°ljuk, ha m√©g nincs ilyen nev≈±
                        if name not in self.tool_classes:
                            self.tool_classes[name] = obj
                            loaded_count += 1
                            logger.debug(f"Tool oszt√°ly bet√∂ltve: {name} from {module_path}")
            
            except Exception as e:
                logger.error(f"Hiba t√∂rt√©nt a tool bet√∂lt√©se k√∂zben ({module_path}): {str(e)}")
        
        logger.info(f"√ñsszesen {loaded_count} tool oszt√°ly bet√∂ltve")
        return loaded_count
        
    def register_tool(self, tool_instance: BaseTool) -> bool:
        """
        Regisztr√°l egy eszk√∂z p√©ld√°nyt.
        
        Args:
            tool_instance: A regisztr√°land√≥ eszk√∂z p√©ld√°ny
            
        Returns:
            bool: True, ha sikeres volt a regisztr√°ci√≥
        """
        name = tool_instance.name
        
        if name in self.tools:
            logger.warning(f"M√°r l√©tezik '{name}' nev≈± eszk√∂z, friss√≠t√©s...")
            
        self.tools[name] = tool_instance
        
        # Kateg√≥ria kezel√©se
        category = tool_instance.category
        if category not in self.categories:
            self.categories[category] = set()
            
        self.categories[category].add(name)
        
        logger.debug(f"Tool regisztr√°lva: {name} (kateg√≥ria: {category})")
        return True
        
    def get_tool(self, name: str) -> Optional[BaseTool]:
        """
        Lek√©r egy eszk√∂zt n√©v alapj√°n.
        
        Args:
            name: Az eszk√∂z neve
            
        Returns:
            Optional[BaseTool]: Az eszk√∂z, ha l√©tezik, egy√©bk√©nt None
        """
        # Ha m√°r l√©tezik p√©ld√°ny, visszaadja
        if name in self.tools:
            return self.tools[name]
        
        # Ha nem l√©tezik p√©ld√°ny, de ismerj√ºk az oszt√°lyt, l√©trehozzuk
        if name in self.tool_classes:
            try:
                tool_instance = self.tool_classes[name]()
                self.register_tool(tool_instance)
                return tool_instance
            except Exception as e:
                logger.error(f"Hiba t√∂rt√©nt a tool p√©ld√°nyos√≠t√°sa k√∂zben ({name}): {str(e)}")
                
        return None
        
    def list_tools(self, category: Optional[str] = None) -> List[Dict[str, Any]]:
        """
        List√°zza az el√©rhet≈ë eszk√∂z√∂ket, opcion√°lisan kateg√≥ria szerint sz≈±rve.
        
        Args:
            category: Opcion√°lis kateg√≥ria sz≈±r√©s
            
        Returns:
            List[Dict[str, Any]]: Az el√©rhet≈ë eszk√∂z√∂k list√°ja
        """
        result = []
        
        # Ha van kateg√≥ria sz≈±r√©s
        if category:
            if category not in self.categories:
                return []
                
            tool_names = self.categories[category]
        else:
            # Az √∂sszes tool n√©v a regisztr√°lt √©s ismert oszt√°lyokb√≥l
            tool_names = set(self.tools.keys()) | set(self.tool_classes.keys())
        
        # Inform√°ci√≥k √∂sszegy≈±jt√©se
        for name in tool_names:
            tool = self.get_tool(name)
            if tool:
                result.append(tool.get_info())
                
        return result
        
    async def execute_tool(self, name: str, **kwargs) -> Dict[str, Any]:
        """
        V√©grehajt egy eszk√∂zt a megadott param√©terekkel.
        
        Args:
            name: Az eszk√∂z neve
            **kwargs: Az eszk√∂zh√∂z tartoz√≥ param√©terek
            
        Returns:
            Dict[str, Any]: Az eredm√©ny sz√≥t√°r form√°ban
        """
        start_time = asyncio.get_event_loop().time()
        
        tool = self.get_tool(name)
        if not tool:
            error_msg = f"Az eszk√∂z nem tal√°lhat√≥: {name}"
            logger.error(error_msg)
            return {"error": error_msg, "success": False}
            
        try:
            # V√©grehajt√°s
            result = await tool.execute(**kwargs)
            
            # Teljes√≠tm√©ny m√©r√©se
            execution_time = asyncio.get_event_loop().time() - start_time
            
            # Esem√©ny k√∂zz√©t√©tele
            await event_bus.publish("tool.executed", {
                "tool": name,
                "execution_time": execution_time,
                "success": True,
                "parameters": kwargs
            })
            
            # Alap√©rtelmezetten adjunk hozz√° success kulcsot, ha nincs
            if "success" not in result:
                result["success"] = True
                
            # Adjuk hozz√° az execution_time-t
            result["execution_time"] = execution_time
            
            return result
            
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a tool ({name}) v√©grehajt√°sa k√∂zben: {str(e)}")
            
            # Hibajelent√©s
            error_msg = str(e)
            error_context = {"component": "tool_registry", "tool": name, "parameters": kwargs}
            await error_handler.handle_error(e, error_context)
            
            # Esem√©ny k√∂zz√©t√©tele
            execution_time = asyncio.get_event_loop().time() - start_time
            await event_bus.publish("tool.executed", {
                "tool": name,
                "execution_time": execution_time,
                "success": False,
                "error": error_msg,
                "parameters": kwargs
            })
            
            return {
                "error": error_msg,
                "success": False,
                "execution_time": execution_time
            }
            
    async def _on_tool_executed(self, data: Dict[str, Any]) -> None:
        """Eszk√∂z v√©grehajt√°s esem√©ny kezel√©se."""
        tool_name = data.get("tool", "unknown")
        success = data.get("success", False)
        execution_time = data.get("execution_time", 0)
        
        # Itt tov√°bbi elemz√©seket vagy napl√≥z√°st lehetne v√©gezni
        
    async def _on_security_violation(self, data: Dict[str, Any]) -> None:
        """Biztons√°gi esem√©ny kezel√©se."""
        logger.warning(f"Biztons√°gi esem√©ny √©szlelve: {data.get('violation_type')} - {data.get('details')}")
        
        # Tov√°bbi biztons√°gi l√©p√©sek itt
        
    def load_security_config(self, config_path: Optional[str] = None) -> bool:
        """
        Bet√∂lti a biztons√°gi be√°ll√≠t√°sokat egy konfigur√°ci√≥s f√°jlb√≥l.
        
        Args:
            config_path: A konfigur√°ci√≥s f√°jl el√©r√©si √∫tja
            
        Returns:
            bool: True, ha sikeres volt a bet√∂lt√©s
        """
        if not config_path:
            config_path = Path(__file__).parent.parent / "config" / "tool_security.json"
            
        try:
            if Path(config_path).exists():
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.security_config.update(config)
                    logger.info(f"Biztons√°gi konfigur√°ci√≥ bet√∂ltve: {config_path}")
                    return True
            else:
                logger.info(f"Biztons√°gi konfigur√°ci√≥ nem tal√°lhat√≥, alap√©rtelmezett be√°ll√≠t√°sok haszn√°lata")
                return False
                
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a biztons√°gi konfigur√°ci√≥ bet√∂lt√©se k√∂zben: {str(e)}")
            return False

    def check_security(self, 
                    operation_type: str, 
                    details: Dict[str, Any]) -> Dict[str, Any]:
        """
        Ellen≈ërzi, hogy egy m≈±velet megfelel-e a biztons√°gi el≈ë√≠r√°soknak.
        
        Args:
            operation_type: A m≈±velet t√≠pusa (pl. "file_write", "network_access")
            details: A m≈±velet r√©szletei
            
        Returns:
            Dict[str, Any]: Az ellen≈ërz√©s eredm√©nye
        """
        if operation_type == "file_write" and not self.security_config["allow_file_write"]:
            return {
                "allowed": False,
                "reason": "F√°jl √≠r√°si m≈±veletek nem enged√©lyezettek a biztons√°gi be√°ll√≠t√°sok alapj√°n"
            }
            
        if operation_type == "system_command" and not self.security_config["allow_system_commands"]:
            return {
                "allowed": False,
                "reason": "Rendszerparancsok v√©grehajt√°sa nem enged√©lyezett a biztons√°gi be√°ll√≠t√°sok alapj√°n"
            }
            
        if operation_type == "network_access" and not self.security_config["allow_network_access"]:
            return {
                "allowed": False,
                "reason": "H√°l√≥zati hozz√°f√©r√©s nem enged√©lyezett a biztons√°gi be√°ll√≠t√°sok alapj√°n"
            }
            
        # F√°jl m≈±veletekre specifikus ellen≈ërz√©sek
        if operation_type in ["file_write", "file_read"]:
            file_path = details.get("path", "")
            
            # Korl√°tozott √∫tvonalak ellen≈ërz√©se
            for restricted in self.security_config["restricted_paths"]:
                if str(file_path).startswith(restricted):
                    return {
                        "allowed": False,
                        "reason": f"A megadott √∫tvonal ({file_path}) korl√°tozott: {restricted}"
                    }
                    
            # F√°jlm√©ret ellen≈ërz√©se √≠r√°sn√°l
            if operation_type == "file_write" and details.get("size", 0) > self.security_config["max_file_size"]:
                return {
                    "allowed": False,
                    "reason": f"A f√°jl m√©rete ({details.get('size', 0)} b√°jt) meghaladja a megengedett m√©retet ({self.security_config['max_file_size']} b√°jt)"
                }
                
        # H√°l√≥zati hozz√°f√©r√©sek ellen≈ërz√©se
        if operation_type == "network_access":
            domain = details.get("domain", "")
            allowed_domains = self.security_config["allowed_domains"]
            
            if "*" not in allowed_domains and domain not in allowed_domains:
                return {
                    "allowed": False,
                    "reason": f"A megadott domain ({domain}) nem enged√©lyezett"
                }
                
        # Minden ellen≈ërz√©s siker√ºlt
        return {
            "allowed": True,
            "reason": "A m≈±velet megfelel a biztons√°gi el≈ë√≠r√°soknak"
        }

# Singleton p√©ld√°ny l√©trehoz√°sa
tool_registry = ToolRegistry()
