"""
Project-S System Tools
------------------
Ez a modul a rendszerparancsokhoz √©s rendszerfunkci√≥khoz kapcsol√≥d√≥ eszk√∂z√∂ket tartalmazza:
- Biztons√°gos rendszerparancs v√©grehajt√°s
- Rendszer inform√°ci√≥k lek√©r√©se
"""

import os
import asyncio
import logging
import subprocess
import shlex
import platform
import psutil
import tempfile
import json
import re
import pathlib
import time
from typing import Dict, Any, List, Optional, Union, Set
from pathlib import Path

from tools.tool_interface import BaseTool
from tools.tool_registry import tool_registry

logger = logging.getLogger(__name__)

class CommandValidator:
    """
    Rendszerparancs valid√°tor √©s korl√°toz√≥ seg√©doszt√°ly.
    """
    
    # Vesz√©lyes parancsok √©s parancsr√©szek - SZIGOR√öAN TILTOTTAK
    FORBIDDEN_COMMANDS = {
        "rm", "del", "format", "mkfs", "fdisk", 
        "chmod", "chown", "sudo", "su", "passwd", "dd", 
        "rundll32", "regedit", "reg", "shutdown", 
        "restart", "halt", "rmdir", "rd", "deltree", "taskkill"
    }
    
    # Vesz√©lyes param√©terek - ENYH√çTVE FEJLESZT√âSI M√ìDBAN
    DANGEROUS_PARAMS = {
        "-rf", "--force", "--recursive", 
        "--delete", "--purge", "--no-preserve-root"
    }
    
    # Enged√©lyezett parancsok feh√©rlist√°ja - KIB≈êV√çTETT FEJLESZT√âSI M√ìD
    ALLOWED_COMMANDS = {
        "ls", "dir", "cd", "pwd", "echo", "cat", "type",
        "find", "mkdir", "md", "ping", "ipconfig", "ifconfig",
        "systeminfo", "ver", "uname", "ps", "tasklist", 
        "free", "df", "du", "date", "time", "whoami",
        "hostname", "python", "pip",
        # Webfejleszt√©si parancsok
        "start", "explorer", "notepad", "copy", "move", "xcopy",
        # PowerShell parancsok
        "powershell", "pwsh", "get-process", "get-service", 
        "get-childitem", "new-item", "set-content", "out-file",
        # H√°l√≥zati diagnosztika
        "netstat", "nslookup", "tracert", "arp", "route",
        # Rendszer info
        "wmic", "sc", "net", "driverquery", "msinfo32"
    }
    @staticmethod
    def validate_command(command: str) -> Dict[str, Any]:
        """
        TESZTEL√âSI M√ìD: Minden parancs enged√©lyezett!
        """
        return {
            "valid": True,
            "reason": "TESZT M√ìD - Minden parancs enged√©lyezett",
            "command": command
        }


class SystemCommandTool(BaseTool):
    """
    Biztons√°gos rendszerparancs v√©grehajt√°s.
    
    Category: system
    Version: 1.0.0
    Requires permissions: Yes
    Safe: No
    """
    
    def __init__(self):
        """Inicializ√°lja az eszk√∂zt."""
        super().__init__()
        # Be√°ll√≠tjuk a munkamapp√°t
        self.work_dir = tool_registry.default_paths["temp"]
        
    async def execute(self, 
                     command: str,
                     timeout: int = 30,
                     workdir: Optional[str] = None) -> Dict[str, Any]:
        """
        V√©grehajt egy rendszerparancsot biztons√°gos m√≥don.
        
        Args:
            command: A v√©grehajtand√≥ parancs
            timeout: Id≈ët√∫ll√©p√©s m√°sodpercben
            workdir: Munkak√∂nyvt√°r el√©r√©si √∫tja
            
        Returns:
            Dict: A v√©grehajt√°s eredm√©nye
        """
        try:
            # TESZT M√ìD: Biztons√°gi ellen≈ërz√©sek kikapcsolva
            logger.info(f"üîß TESZT M√ìD: Futtatom a parancsot: {command}")
            
            # Parancs valid√°l√°sa - MINDIG SIKERES TESZT M√ìDBAN
            validation = CommandValidator.validate_command(command)
            logger.info(f"Validation result: {validation}")
                
            # Munkak√∂nyvt√°r be√°ll√≠t√°sa
            if workdir is None:
                workdir = self.work_dir
            else:
                # Ellen≈ërizz√ºk, hogy a munkak√∂nyvt√°r megengedett-e
                workdir_path = Path(workdir).resolve()
                for restricted in tool_registry.security_config["restricted_paths"]:
                    if str(workdir_path).startswith(restricted):
                        return {
                            "success": False,
                            "error": f"A megadott munkak√∂nyvt√°r ({workdir}) korl√°tozott: {restricted}",
                            "stdout": "",
                            "stderr": "",
                            "exit_code": -1
                        }
            
            # Parancs v√©grehajt√°sa aszinkron m√≥don
            process = await asyncio.create_subprocess_shell(
                command,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE,
                cwd=workdir,
                shell=True
            )
            
            try:
                stdout_data, stderr_data = await asyncio.wait_for(
                    process.communicate(), 
                    timeout=timeout
                )
                stdout = stdout_data.decode('utf-8', errors='replace')
                stderr = stderr_data.decode('utf-8', errors='replace')
                exit_code = process.returncode
                
            except asyncio.TimeoutError:
                # Id≈ët√∫ll√©p√©s eset√©n megszak√≠tjuk a folyamatot
                try:
                    process.terminate()
                    await asyncio.sleep(0.5)
                    if process.returncode is None:
                        process.kill()
                except Exception:
                    pass
                    
                return {
                    "success": False,
                    "error": f"Id≈ët√∫ll√©p√©s: a parancs v√©grehajt√°sa tov√°bb tartott, mint {timeout} m√°sodperc",
                    "stdout": "",
                    "stderr": "",
                    "exit_code": -1,
                    "timeout": True
                }
            
            # Eredm√©ny √∂ssze√°ll√≠t√°sa
            success = exit_code == 0
            
            return {
                "success": success,
                "stdout": stdout,
                "stderr": stderr,
                "exit_code": exit_code,
                "command": command,
                "workdir": workdir
            }
                
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a rendszerparancs v√©grehajt√°sa k√∂zben: {str(e)}")
            return {
                "success": False,
                "error": f"Hiba a rendszerparancs v√©grehajt√°sa sor√°n: {str(e)}",
                "stdout": "",
                "stderr": "",
                "exit_code": -1
            }


class SystemInfoTool(BaseTool):
    """
    Rendszer inform√°ci√≥k lek√©rdez√©se.
    
    Category: system
    Version: 1.0.0
    Requires permissions: No
    Safe: Yes
    """
    
    async def execute(self, info_type: str = "all") -> Dict[str, Any]:
        """
        Inform√°ci√≥kat ad a rendszerr≈ël.
        
        Args:
            info_type: A lek√©rend≈ë inform√°ci√≥ t√≠pusa 
                      ('all', 'os', 'cpu', 'memory', 'disk', 'network')
            
        Returns:
            Dict: A lek√©rdez√©s eredm√©nye
        """
        try:
            result = {}
            
            # Inform√°ci√≥k az oper√°ci√≥s rendszerr≈ël
            if info_type in ["all", "os"]:
                os_info = {
                    "system": platform.system(),
                    "release": platform.release(),
                    "version": platform.version(),
                    "architecture": platform.machine(),
                    "processor": platform.processor(),
                    "hostname": platform.node(),
                    "python_version": platform.python_version()
                }
                result["os"] = os_info
                
            # CPU inform√°ci√≥
            if info_type in ["all", "cpu"]:
                cpu_info = {
                    "physical_cores": psutil.cpu_count(logical=False),
                    "total_cores": psutil.cpu_count(logical=True),
                    "cpu_percent": psutil.cpu_percent(interval=0.5),
                    "cpu_freq": {
                        "current": psutil.cpu_freq().current if psutil.cpu_freq() else None,
                        "min": psutil.cpu_freq().min if psutil.cpu_freq() else None,
                        "max": psutil.cpu_freq().max if psutil.cpu_freq() else None
                    }
                }
                result["cpu"] = cpu_info
                
            # Mem√≥ria inform√°ci√≥
            if info_type in ["all", "memory"]:
                mem = psutil.virtual_memory()
                memory_info = {
                    "total": mem.total,
                    "available": mem.available,
                    "used": mem.used,
                    "percent": mem.percent
                }
                result["memory"] = memory_info
                
                # Swap inform√°ci√≥
                swap = psutil.swap_memory()
                swap_info = {
                    "total": swap.total,
                    "used": swap.used,
                    "free": swap.free,
                    "percent": swap.percent
                }
                result["swap"] = swap_info
                
            # Lemez inform√°ci√≥
            if info_type in ["all", "disk"]:
                disk_info = []
                for partition in psutil.disk_partitions():
                    try:
                        usage = psutil.disk_usage(partition.mountpoint)
                        partition_info = {
                            "device": partition.device,
                            "mountpoint": partition.mountpoint,
                            "fstype": partition.fstype,
                            "total": usage.total,
                            "used": usage.used,
                            "free": usage.free,
                            "percent": usage.percent
                        }
                        disk_info.append(partition_info)
                    except (PermissionError, OSError):
                        # N√©h√°ny lemez nem el√©rhet≈ë (pl. CD-ROM)
                        pass
                        
                result["disk"] = disk_info
                
            # H√°l√≥zati inform√°ci√≥
            if info_type in ["all", "network"]:
                # H√°l√≥zati interf√©szek
                interfaces = psutil.net_if_addrs()
                net_interfaces = {}
                
                for interface_name, interface_addresses in interfaces.items():
                    addresses = []
                    for addr in interface_addresses:
                        address_info = {
                            "family": str(addr.family),
                            "address": addr.address,
                            "netmask": addr.netmask,
                            "broadcast": addr.broadcast
                        }
                        addresses.append(address_info)
                        
                    net_interfaces[interface_name] = addresses
                    
                # H√°l√≥zati forgalom
                net_io = psutil.net_io_counters()
                net_io_info = {
                    "bytes_sent": net_io.bytes_sent,
                    "bytes_recv": net_io.bytes_recv,
                    "packets_sent": net_io.packets_sent,
                    "packets_recv": net_io.packets_recv
                }
                
                result["network"] = {
                    "interfaces": net_interfaces,
                    "io": net_io_info
                }
                
            # Az eredm√©ny kieg√©sz√≠t√©se egy√©b adatokkal
            result["timestamp"] = psutil.boot_time()
            result["uptime"] = int(time.time() - psutil.boot_time())
            
            return {
                "success": True,
                "info_type": info_type,
                "result": result
            }
                
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a rendszer inform√°ci√≥k lek√©r√©se k√∂zben: {str(e)}")
            return {
                "success": False,
                "error": f"Hiba a rendszer inform√°ci√≥k lek√©r√©se sor√°n: {str(e)}"
            }


class EnvironmentVariableTool(BaseTool):
    """
    K√∂rnyezeti v√°ltoz√≥k kezel√©se.
    
    Category: system
    Version: 1.0.0
    Requires permissions: No
    Safe: Yes
    """
    
    # Biztons√°gos k√∂rnyezeti v√°ltoz√≥k, amelyek lek√©rdezhet≈ëk
    SAFE_ENV_VARS = {
        "PATH", "PYTHONPATH", "TEMP", "TMP", "HOME", "USER", 
        "USERPROFILE", "LANG", "LANGUAGE", "LC_ALL", "SHELL",
        "TERM", "HOSTNAME"
    }
    
    async def execute(self, 
                     action: str = "get",
                     name: Optional[str] = None) -> Dict[str, Any]:
        """
        K√∂rnyezeti v√°ltoz√≥k kezel√©se.
        
        Args:
            action: A v√©grehajtand√≥ m≈±velet ('get' vagy 'list')
            name: A k√∂rnyezeti v√°ltoz√≥ neve (csak 'get' m≈±velethez)
            
        Returns:
            Dict: A m≈±velet eredm√©nye
        """
        try:
            # Lista m≈±velet: √∂sszes biztons√°gos env v√°ltoz√≥ list√°z√°sa
            if action == "list":
                # Csak a biztons√°gos v√°ltoz√≥kat adjuk vissza
                safe_env = {}
                for key, value in os.environ.items():
                    if key.upper() in self.SAFE_ENV_VARS:
                        safe_env[key] = value
                        
                return {
                    "success": True,
                    "action": action,
                    "variables": safe_env
                }
                
            # Get m≈±velet: egy konkr√©t v√°ltoz√≥ lek√©r√©se
            elif action == "get":
                if name is None:
                    return {
                        "success": False,
                        "error": "A 'get' m≈±velethez meg kell adni a v√°ltoz√≥ nev√©t"
                    }
                    
                # Ellen≈ërizz√ºk, hogy biztons√°gos-e a v√°ltoz√≥
                if name.upper() not in self.SAFE_ENV_VARS:
                    return {
                        "success": False,
                        "error": f"A(z) '{name}' k√∂rnyezeti v√°ltoz√≥ nem k√©rdezhet≈ë le biztons√°gi okokb√≥l"
                    }
                    
                # V√°ltoz√≥ lek√©r√©se
                value = os.environ.get(name)
                
                if value is None:
                    return {
                        "success": False,
                        "error": f"A(z) '{name}' k√∂rnyezeti v√°ltoz√≥ nem l√©tezik"
                    }
                    
                return {
                    "success": True,
                    "action": action,
                    "name": name,
                    "value": value
                }
                
            else:
                return {
                    "success": False,
                    "error": f"√ârv√©nytelen m≈±velet: {action}. T√°mogatott m≈±veletek: 'get', 'list'"
                }
                
        except Exception as e:
            logger.error(f"Hiba t√∂rt√©nt a k√∂rnyezeti v√°ltoz√≥k kezel√©se k√∂zben: {str(e)}")
            return {
                "success": False,
                "error": f"Hiba a k√∂rnyezeti v√°ltoz√≥k kezel√©se sor√°n: {str(e)}"
            }