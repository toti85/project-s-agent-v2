#!/usr/bin/env python3
"""
Project-S V2 Komplex Feladat Tesztel≈ë
Term√©szetes nyelvi feladatok feldolgoz√°sa √©s v√©grehajt√°sa
"""

import asyncio
import sys
import platform
from pathlib import Path
from datetime import datetime

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from tools.registry.tool_registry_golden import ToolRegistry
from core.evaluator import Evaluator
from integrations.ai_models.multi_model_ai_client import AIClient

class ComplexTaskProcessor:
    """Komplex feladatok feldolgoz√°s√°√©rt felel≈ës oszt√°ly"""
    
    def __init__(self):
        self.tool_registry = ToolRegistry()
        
        # Initialize AI client for task understanding
        self.ai_client = AIClient()
        
        # Initialize evaluator for result assessment
        self.evaluator = Evaluator(self.ai_client)
    
    async def process_natural_language_task(self, task_description: str):
        """
        Term√©szetes nyelvi feladat feldolgoz√°sa √©s v√©grehajt√°sa
        
        Args:
            task_description: A feladat term√©szetes nyelvi le√≠r√°sa
        """
        print(f"üéØ KOMPLEX FELADAT FELDOLGOZ√ÅS")
        print(f"üìù Feladat: {task_description}")
        print("=" * 60)
        
        try:
            # 1. Feladat elemz√©se √©s tervk√©sz√≠t√©s
            print("ü§î F√ÅZIS 1: Feladat elemz√©se √©s tervk√©sz√≠t√©s...")
            
            analysis_prompt = f"""
Feladat: {task_description}

El√©rhet≈ë eszk√∂z√∂k:
{', '.join(self.tool_registry.tools.keys())}

K√©rlek, elemezd a feladatot √©s k√©sz√≠ts egy l√©p√©sr≈ël l√©p√©sre tervet a v√©grehajt√°shoz.
V√°laszold meg JSON form√°tumban:
{{
    "understood_task": "feladat meg√©rt√©se",
    "required_tools": ["sz√ºks√©ges eszk√∂z√∂k list√°ja"],
    "execution_plan": [
        {{
            "step": 1,
            "description": "l√©p√©s le√≠r√°sa",
            "tool": "haszn√°land√≥ eszk√∂z",
            "parameters": {{"param": "√©rt√©k"}}
        }}
    ],
    "expected_outcome": "v√°rhat√≥ eredm√©ny"
}}
"""
            
            analysis_result = await self.ai_client.generate_response(
                prompt=analysis_prompt,
                model="deepseek/deepseek-chat",  # DeepSeek V3 modell haszn√°lata - optimaliz√°lt k√≥dol√°sra
                task_type="general",
                temperature=0.7,
                max_tokens=1000
            )
            print(f"‚úÖ Elemz√©s befejezve:")
            print(f"üìä AI v√°lasz: {str(analysis_result)[:200]}...")
            
            # 2. Terv v√©grehajt√°sa
            print("\\n‚ö° F√ÅZIS 2: Terv v√©grehajt√°sa...")
            
            # Intelligens v√©grehajt√°si d√∂nt√©s - Fejlesztett feladat felismer√©s
            if any(keyword in task_description.lower() for keyword in ["google", "gmail", "keress", "search", "nyisd meg", "open", "browse", "b√∂ng√©sz≈ë", "weboldal megnyit√°s", "navigate"]):
                await self._execute_browser_automation_operations(task_description)
            elif any(keyword in task_description.lower() for keyword in ["scrape", "scrap", "begy≈±jt", "crawl", "web data", "extract data", "monitor", "track prices"]):
                await self._execute_web_scraping_operations(task_description)
            elif any(keyword in task_description.lower() for keyword in ["program", "k√≥d", "code", "script", "j√°t√©k", "game", "alkalmaz√°s", "app", "√≠rj", "write", "k√©sz√≠ts", "create"]):
                await self._execute_programming_operations(task_description)
            elif "pdf" in task_description.lower():
                await self._execute_pdf_operations(task_description)
            elif "f√°jl" in task_description.lower() or "file" in task_description.lower():
                await self._execute_file_operations(task_description)
            elif "weboldal" in task_description.lower() or "website" in task_description.lower() or "html" in task_description.lower():
                await self._execute_web_development_operations(task_description)
            elif "elemz√©s" in task_description.lower() or "analysis" in task_description.lower():
                await self._execute_analysis_operations(task_description)
            elif "jelent√©s" in task_description.lower() or "report" in task_description.lower():
                await self._execute_report_operations(task_description)
            else:
                # Minden m√°s feladatn√°l pr√≥b√°ljunk parancsokat gener√°lni
                await self._execute_command_operations(task_description)
            
            # 3. Eredm√©ny √©rt√©kel√©se
            print("\\nüìä F√ÅZIS 3: Eredm√©ny √©rt√©kel√©se...")
            
            evaluation_result = await self.evaluator.evaluate_result(
                result={"status": "completed", "message": "Feladat v√©grehajtva"},
                expected_outcome=task_description
            )
            print(f"‚úÖ √ârt√©kel√©s: {evaluation_result.get('success', False)}")
            print(f"üìà Pontsz√°m: {evaluation_result.get('score', 0)}")
            
        except Exception as e:
            print(f"‚ùå Hiba a feladat feldolgoz√°s sor√°n: {e}")
    
    async def _execute_file_operations(self, task_description: str):
        """F√°jl m≈±veletek v√©grehajt√°sa"""
        print("üìÅ F√°jl m≈±veletek v√©grehajt√°sa...")
        
        # Teszt f√°jl l√©trehoz√°sa
        content = f"""# Automatikusan Gener√°lt F√°jl

**Feladat:** {task_description}
**L√©trehozva:** {datetime.now()}

## V√©grehajt√°s R√©szletei
- AI elemz√©s: Befejezve
- F√°jl m≈±veletek: Akt√≠v
- St√°tusz: Sikeres

## K√∂vetkez≈ë L√©p√©sek
A rendszer sikeresen feldolgozta a feladatot √©s l√©trehozta ezt a dokumentumot.
"""
        
        result = await self.tool_registry.tools['file_writer'].execute(
            path=f"task_result_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
            content=content
        )
        
        if result and result.get('success'):
            print(f"‚úÖ Eredm√©ny f√°jl l√©trehozva: {result.get('file_path', 'Ismeretlen')}")
        
    async def _execute_analysis_operations(self, task_description: str):
        """Elemz√©si m≈±veletek v√©grehajt√°sa"""
        print("üîç Elemz√©si m≈±veletek v√©grehajt√°sa...")
        
        # Rendszer inform√°ci√≥ gy≈±jt√©se
        sys_info = await self.tool_registry.tools['system_info'].execute(info_type="basic")
        
        # Projekt strukt√∫ra elemz√©se
        # dir_info = await self.tool_registry.tools['directory_lister'].execute(path=".", recursive=False)
        
        analysis_content = f"""# Rendszer Elemz√©si Jelent√©s

**Feladat:** {task_description}
**Elemz√©s ideje:** {datetime.now()}

## Rendszer Inform√°ci√≥k
"""
        
        if sys_info and sys_info.get('success'):
            info = sys_info.get('info', {})
            analysis_content += f"""
- **Platform:** {info.get('platform', 'N/A')}
- **Architekt√∫ra:** {info.get('architecture', 'N/A')}
- **Python verzi√≥:** {info.get('python_version', 'N/A')}
"""
        
        analysis_content += f"""
## El√©rhet≈ë Eszk√∂z√∂k
Regisztr√°lt tools sz√°ma: {len(self.tool_registry.tools)}

Eszk√∂z√∂k:
"""
        
        for tool_name in self.tool_registry.tools.keys():
            analysis_content += f"- {tool_name}\\n"
        
        analysis_content += f"""
## K√∂vetkeztet√©s
A rendszer elemz√©se sikeresen befejezve. Minden alapvet≈ë funkcionalit√°s el√©rhet≈ë.
"""
        
        result = await self.tool_registry.tools['file_writer'].execute(
            path=f"system_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
            content=analysis_content
        )
        
        if result and result.get('success'):
            print(f"‚úÖ Elemz√©si jelent√©s l√©trehozva: {result.get('file_path', 'Ismeretlen')}")
    
    async def _execute_report_operations(self, task_description: str):
        """Jelent√©s gener√°l√°si m≈±veletek"""
        print("üìä Jelent√©s gener√°l√°si m≈±veletek v√©grehajt√°sa...")

        # R√©szletes rendszerinform√°ci√≥ lek√©r√©se
        sys_info_result = await self.tool_registry.tools['system_info'].execute(info_type="detailed")
        sysinfo_md = ""
        if sys_info_result and sys_info_result.get('success'):
            info = sys_info_result.get('system_info', {})
            sysinfo_md += "## R√©szletes Rendszerinform√°ci√≥k\n"
            for k, v in info.items():
                sysinfo_md += f"- **{k}**: {v}\n"
        else:
            sysinfo_md = "Nem siker√ºlt rendszerinform√°ci√≥t lek√©rni.\n"

        # Windowsos parancsok futtat√°sa
        if platform.system() == 'Windows':
            print("üñ•Ô∏è Windows-specifikus parancsok futtat√°sa...")
            
            # SystemInfo parancs
            systeminfo_result = await self.tool_registry.tools['system_command'].execute(command="systeminfo")
            if systeminfo_result and systeminfo_result.get('success'):
                sysinfo_md += "\n## Windows SystemInfo Kimenet\n```\n"
                sysinfo_md += systeminfo_result.get('stdout', 'Nincs kimenet')[:1000] + "\n```\n"
            
            # Tasklist parancs
            tasklist_result = await self.tool_registry.tools['system_command'].execute(command="tasklist")
            if tasklist_result and tasklist_result.get('success'):
                sysinfo_md += "\n## Fut√≥ Folyamatok (els≈ë 20 sor)\n```\n"
                lines = tasklist_result.get('stdout', '').split('\n')[:20]
                sysinfo_md += '\n'.join(lines) + "\n```\n"

        report_content = f"""# Automatikus Jelent√©s

**Gener√°lva:** {datetime.now()}
**Feladat alapja:** {task_description}

## Executive Summary
A Project-S V2 rendszer sikeresen feldolgozta a megadott feladatot √©s automatikus jelent√©st gener√°lt.

## Teljes√≠tm√©ny Metrik√°k
- ‚úÖ Feladat feldolgoz√°s: Sikeres
- ‚úÖ AI elemz√©s: M≈±k√∂d≈ëk√©pes  
- ‚úÖ Tool v√©grehajt√°s: Operacion√°lis
- ‚úÖ Jelent√©s gener√°l√°s: Befejezve

## Technikai R√©szletek
- **Rendszer:** Project-S V2 Architecture
- **AI Backend:** Multi-Model Client
- **Tools:** {len(self.tool_registry.tools)} regisztr√°lt eszk√∂z
- **St√°tusz:** Production Ready

{sysinfo_md}

## K√∂vetkez≈ë L√©p√©sek
1. Eredm√©nyek valid√°l√°sa
2. Tov√°bbi feladatok defini√°l√°sa
3. Rendszer optimaliz√°l√°s

---
*Automatikusan gener√°lva a Project-S V2 AI rendszer √°ltal*"""
        
        result = await self.tool_registry.tools['file_writer'].execute(
            path=f"automated_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
            content=report_content
        )
        
        if result and result.get('success'):
            print(f"‚úÖ Automatikus jelent√©s l√©trehozva: {result.get('file_path', 'Ismeretlen')}")
    
    async def _execute_general_operations(self, task_description: str):
        """√Åltal√°nos m≈±veletek v√©grehajt√°sa"""
        print("üîß √Åltal√°nos m≈±veletek v√©grehajt√°sa...")
        
        general_content = f"""# √Åltal√°nos Feladat V√©grehajt√°s

**Feladat:** {task_description}
**V√©grehajtva:** {datetime.now()}

## Feldolgoz√°s Folyamata
1. ‚úÖ Feladat term√©szetes nyelvi elemz√©se
2. ‚úÖ Megfelel≈ë eszk√∂z√∂k azonos√≠t√°sa
3. ‚úÖ V√©grehajt√°si terv k√©sz√≠t√©se
4. ‚úÖ M≈±veletek elv√©gz√©se
5. ‚úÖ Eredm√©nyek dokument√°l√°sa

## Rendszer V√°lasz
A Project-S V2 rendszer feldolgozta a feladatot a rendelkez√©sre √°ll√≥ eszk√∂z√∂kkel.

El√©rhet≈ë funkci√≥k:
"""
        
        for tool_name, tool in self.tool_registry.tools.items():
            general_content += f"- **{tool_name}**: {tool.__doc__ or 'El√©rhet≈ë'}\\n"
        
        general_content += f"""
## K√∂vetkeztet√©s
A feladat a rendszer k√©pess√©geinek megfelel≈ëen feldolgoz√°sra ker√ºlt.
"""
        
        result = await self.tool_registry.tools['file_writer'].execute(
            path=f"general_task_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
            content=general_content
        )
        
        if result and result.get('success'):
            print(f"‚úÖ √Åltal√°nos feladat eredm√©ny l√©trehozva: {result.get('file_path', 'Ismeretlen')}")

    async def _execute_command_operations(self, task_description: str):
        """Parancs v√©grehajt√°si m≈±veletek - AI-ALAP√ö INTELLIGENS PARANCS GENER√ÅL√ÅS"""
        print("üíª AI-alap√∫ parancs v√©grehajt√°si m≈±veletek...")
        
        # AI-alap√∫ parancs gener√°l√°s
        commands_to_run = await self._generate_commands_from_natural_language(task_description)
        
        if not commands_to_run:
            print("‚ö†Ô∏è Nem siker√ºlt parancsokat gener√°lni a feladatb√≥l")
            return

        command_results = {}
        
        # Parancsok v√©grehajt√°sa
        for cmd in commands_to_run:
            print(f"üîß DEV MODE: Futtatom a parancsot: {cmd}")
            result = await self.tool_registry.tools['system_command'].execute(command=cmd)
            if result and result.get('success'):
                command_results[cmd] = {
                    "stdout": result.get('stdout', ''),
                    "stderr": result.get('stderr', ''),
                    "return_code": result.get('return_code', 0)
                }
                print(f"‚úÖ Parancs sikeres: {cmd} (return code: {result.get('return_code', 0)})")
            else:
                command_results[cmd] = {"error": result.get('error', 'Ismeretlen hiba')}
                print(f"‚ùå Parancs sikertelen: {cmd} - {result.get('error', 'Ismeretlen hiba')}")

        # Eredm√©nyek dokument√°l√°sa
        command_content = f"""# Parancs V√©grehajt√°si Jelent√©s

**Feladat:** {task_description}
**V√©grehajtva:** {datetime.now()}

## V√©grehajtott Parancsok
"""
        
        for cmd, result in command_results.items():
            command_content += f"""
### Parancs: `{cmd}`
"""
            if "error" in result:
                command_content += f"‚ùå **Hiba:** {result['error']}\\n\\n"
            else:
                command_content += f"""‚úÖ **Sikeresen v√©grehajtva** (return code: {result['return_code']})

**Kimenet:**
```
{result['stdout'][:2000]}  
```

"""
                if result['stderr']:
                    command_content += f"""**Hibakimenet:**
```
{result['stderr'][:500]}
```

"""

        # Parancs jelent√©s f√°jlba √≠r√°sa
        result = await self.tool_registry.tools['file_writer'].execute(
            path=f"command_execution_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
            content=command_content
        )
        
        if result and result.get('success'):
            print(f"‚úÖ Parancs v√©grehajt√°si jelent√©s l√©trehozva: {result.get('file_path', 'Ismeretlen')}")

    async def _generate_commands_from_natural_language(self, task_description: str) -> list:
        """AI-alap√∫ parancs gener√°l√°s term√©szetes nyelvb≈ël"""
        print("üß† AI parancs gener√°l√°s folyamatban...")
        
        command_generation_prompt = f"""
Feladat: {task_description}

Te egy Windows rendszeradminisztr√°tor vagy. A felhaszn√°l√≥ egy term√©szetes nyelvi k√©r√©st adott, √©s te megfelel≈ë Windows parancsokat kell gener√°lj.

FONTOS BIZTONS√ÅGI SZAB√ÅLYOK:
- NE gener√°lj destrukt√≠v parancsokat (del, format, rmdir /s stb.)
- Ker√ºld a rendszerfile m√≥dos√≠t√°sokat
- El≈ënyben r√©szes√≠tsd a csak-olvas√°si parancsokat
- Ha bizonytalan vagy, ink√°bb diagnosztikai parancsokat haszn√°lj
- Windows √∫tvonalakban haszn√°lj forward slash-t (/) az echo parancsokban, mert jobban m≈±k√∂dik

P√©lda k√©r√©sek √©s megfelel≈ë parancsok:
- "Lass√∫ a g√©pem" ‚Üí ["tasklist /v", "wmic process get processid,name,percentprocessortime", "perfmon /res"]
- "Friss√≠tsd a windowst" ‚Üí ["powershell Get-WindowsUpdate", "sfc /scannow"]
- "Hozz l√©tre weboldalt" ‚Üí ["mkdir my_website", "echo '<html><body><h1>Hello</h1></body></html>' | Out-File -FilePath my_website/index.html -Encoding UTF8"]

HANGER≈ê VEZ√âRL√âS SPECI√ÅLIS PARANCSOK:
- "Ved fel a hanger≈ët" ‚Üí ["powershell.exe -Command \"(New-Object -ComObject WScript.Shell).SendKeys([char]175)\""]
- "Ved le a hanger≈ët" ‚Üí ["powershell.exe -Command \"(New-Object -ComObject WScript.Shell).SendKeys([char]174)\""]
- "Hanger≈ë 50%" ‚Üí ["powershell.exe -Command \"$obj = New-Object -ComObject WScript.Shell; 1..50 | ForEach {{$obj.SendKeys([char]174)}}; 1..25 | ForEach {{$obj.SendKeys([char]175)}}\""]
- "Mutasd a hanger≈ët" ‚Üí ["powershell.exe -Command \"Get-AudioDevice -List\""]

POWERSHELL PARANCSOK SPECI√ÅLIS FORM√ÅTUMA:
- MINDIG haszn√°lj "powershell.exe -Command" prefix-et PowerShell parancsokhoz
- Id√©z≈ëjelek: haszn√°lj \" escape-elt id√©z≈ëjeleket a PowerShell stringekhez
- SendKeys parancsok: [char]175 = Volume Up, [char]174 = Volume Down, [char]173 = Mute

F√ÅJL L√âTREHOZ√ÅSI SZAB√ÅLYOK WINDOWS-ON:
- NE haszn√°lj "echo text > file" parancsokat HTML/√∂sszetett tartalomhoz
- HELYETTE haszn√°ld: "echo 'content' | Out-File -FilePath folder/file.html -Encoding UTF8"
- Forward slash-t (/) haszn√°lj az √∫tvonalakban
- Az Out-File sokkal megb√≠zhat√≥bb √∂sszetett tartalomhoz
- "Mi haszn√°lja a CPU-t?" ‚Üí ["tasklist /v", "wmic cpu get loadpercentage /value"]
- "H√°l√≥zati probl√©m√°k" ‚Üí ["ipconfig /all", "ping google.com", "netstat -an"]
- "Lemez teljes" ‚Üí ["dir c:\\ /s", "cleanmgr", "wmic logicaldisk get size,freespace"]
- "Demo weboldal l√©trehoz√°sa" ‚Üí ["mkdir demo_website", "echo '<html><head><title>Demo</title></head><body><h1>Hello World!</h1><p>Demo weboldal</p></body></html>' > demo_website/index.html", "start demo_website/index.html"]
- "Weboldal ind√≠t√°sa" ‚Üí ["mkdir my_website", "echo '<html><body><h1>Hello World</h1></body></html>' > my_website/index.html", "start my_website/index.html"]

V√°laszold meg JSON form√°tumban:
{{
    "commands": [
        {{
            "command": "parancs sz√∂vege",
            "description": "parancs le√≠r√°sa",
            "safety_level": "safe|moderate|careful",
            "purpose": "mi√©rt ezt a parancsot v√°lasztottad"
        }}
    ],
    "warnings": ["esetleges figyelmeztet√©sek"],
    "explanation": "r√∂vid magyar√°zat a v√°laszt√°sr√≥l"
}}

Feladat elemz√©se: {task_description}
"""
        
        try:
            ai_response = await self.ai_client.generate_response(
                prompt=command_generation_prompt,
                model="deepseek/deepseek-chat",  # DeepSeek V3 modell haszn√°lata - optimaliz√°lt k√≥dol√°sra
                task_type="general",  # √Åltal√°nos feladat t√≠pus
                temperature=0.3,  # Alacsonyabb temp a konzisztens v√°laszok√©rt
                max_tokens=800
            )
            
            print(f"ü§ñ AI v√°lasz: {str(ai_response)[:150]}...")
            
            # JSON kinyer√©se - JAV√çTOTT VERZI√ì (parancsokhoz)
            import json
            import re
            
            response_text = str(ai_response)
            parsed_response = None
            
            # T√∂bbf√©le JSON form√°tum kezel√©se
            json_patterns = [
                r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}',  # Nested JSON pattern
                r'\{.*?\}',  # Simple JSON pattern  
                r'```json\s*(\{.*?\})\s*```',  # Markdown code block
                r'```\s*(\{.*?\})\s*```'  # Generic code block
            ]
            
            for pattern in json_patterns:
                json_match = re.search(pattern, response_text, re.DOTALL)
                if json_match:
                    try:
                        json_text = json_match.group(1) if json_match.lastindex else json_match.group()
                        # Clean common issues
                        json_text = json_text.strip()
                        json_text = re.sub(r',\s*}', '}', json_text)  # Remove trailing commas
                        json_text = re.sub(r',\s*]', ']', json_text)  # Remove trailing commas in arrays
                        
                        parsed_response = json.loads(json_text)
                        print(f"‚úÖ JSON sikeresen feldolgozva (parancsok)")
                        break
                    except json.JSONDecodeError as e:
                        print(f"‚ö†Ô∏è JSON parse hiba pattern: {e}")
                        continue
            
            if parsed_response:
                commands = []
                
                for cmd_info in parsed_response.get('commands', []):
                    command = cmd_info.get('command', '').strip()
                    safety = cmd_info.get('safety_level', 'careful')
                    
                    # Biztons√°gi ellen≈ërz√©s
                    if self._is_command_safe(command):
                        commands.append(command)
                        print(f"‚úÖ Biztons√°gos parancs: {command} ({safety})")
                    else:
                        print(f"‚ö†Ô∏è Kock√°zatos parancs elutas√≠tva: {command}")
                
                if parsed_response.get('warnings'):
                    for warning in parsed_response.get('warnings', []):
                        print(f"‚ö†Ô∏è Figyelmeztet√©s: {warning}")
                
                return commands
            else:
                print("‚ùå Nem siker√ºlt JSON-t kinyerni az AI v√°laszb√≥l")
            
            # Fallback: egyszer≈± kulcssz√≥ alap√∫ felismer√©s
            return self._fallback_command_recognition(task_description)
            
        except Exception as e:
            print(f"‚ùå AI parancs gener√°l√°s hiba: {e}")
            return self._fallback_command_recognition(task_description)
    
    def _is_command_safe(self, command: str) -> bool:
        """TESZT M√ìD: Minden parancs biztons√°gos!"""
        return True
    
    def _fallback_command_recognition(self, task_description: str) -> list:
        """Egyszer≈± kulcssz√≥ alap√∫ parancs felismer√©s (fallback)"""
        commands = []
        task_lower = task_description.lower()
        
        # Teljes√≠tm√©ny probl√©m√°k
        if any(word in task_lower for word in ['lass√∫', 'slow', 'teljes√≠tm√©ny', 'performance', 'gyors√≠tsd', 'speed']):
            commands.extend(['tasklist /v', 'wmic cpu get loadpercentage /value', 'wmic process get processid,name,percentprocessortime'])
        
        # Mem√≥ria probl√©m√°k  
        if any(word in task_lower for word in ['mem√≥ria', 'memory', 'ram']):
            commands.extend(['wmic OS get TotalVisibleMemorySize,FreePhysicalMemory /value', 'tasklist /m'])
        
        # H√°l√≥zati probl√©m√°k
        if any(word in task_lower for word in ['h√°l√≥zat', 'network', 'internet', 'kapcsolat', 'ping']):
            commands.extend(['ipconfig /all', 'netstat -an', 'ping google.com'])
        
        # Lemez probl√©m√°k
        if any(word in task_lower for word in ['lemez', 'disk', 'storage', 'hely', 'space']):
            commands.extend(['wmic logicaldisk get size,freespace', 'dir c:\\ /a'])
        
        # Alapvet≈ë rendszer info
        if any(word in task_lower for word in ['rendszer', 'system', 'info', 'inform√°ci√≥']):
            commands.extend(['systeminfo', 'wmic computersystem get model,manufacturer'])
        
        # √öJ L√ÅTV√ÅNYOS PARANCSOK!
        
        # Bejelentkezett felhaszn√°l√≥k
        if any(word in task_lower for word in ['bejelentkezve', 'logged', 'users', 'felhaszn√°l√≥', 'ki van']):
            commands.extend(['query user', 'wmic computersystem get username', 'net user'])
        
        # Szolg√°ltat√°sok
        if any(word in task_lower for word in ['szolg√°ltat√°s', 'service', 'futnak']):
            commands.extend(['net start', 'sc query', 'wmic service get name,state,startmode'])
        
        # Legnagyobb f√°jlok
        if any(word in task_lower for word in ['legnagyobb', 'big', 'large', 'f√°jl']):
            commands.extend(['forfiles /p c:\\ /s /m *.* /c "cmd /c echo @path @fsize"', 'dir c:\\ /s /o-s'])
        
        # Event Log hib√°k
        if any(word in task_lower for word in ['event', 'log', 'hib√°k', 'error']):
            commands.extend(['wevtutil qe System /c:10 /rd:true /f:text', 'wevtutil qe Application /c:10 /rd:true /f:text'])
        
        # Telep√≠tett programok
        if any(word in task_lower for word in ['telep√≠tett', 'installed', 'program', 'software']):
            commands.extend(['wmic product get name,version', 'powershell "Get-WmiObject -Class Win32_Product | Select-Object Name,Version"'])
        
        # WiFi jelszavak (biztons√°gos verzi√≥)
        if any(word in task_lower for word in ['wifi', 'wireless', 'jelszav', 'password']):
            commands.extend(['netsh wlan show profiles', 'netsh wlan show profile name="*" key=clear'])
        
        # Nyitott portok
        if any(word in task_lower for word in ['port', 'kapcsolat', 'connection']):
            commands.extend(['netstat -an', 'netstat -b', 'wmic process get processid,name'])
        
        # Rendszer esem√©nyek
        if any(word in task_lower for word in ['esem√©ny', 'event', 't√∂rt√©nt', 'utols√≥']):
            commands.extend(['wevtutil qe System /c:10 /rd:true', 'systeminfo | findstr "Boot Time"'])
        
        # Rendszer ind√≠t√°s info
        if any(word in task_lower for word in ['indult', 'boot', 'startup', 'mikor']):
            commands.extend(['systeminfo | findstr "Boot"', 'wmic os get lastbootuptime'])
        
        # K√∂rnyezeti v√°ltoz√≥k
        if any(word in task_lower for word in ['k√∂rnyezeti', 'environment', 'v√°ltoz√≥']):
            commands.extend(['set', 'wmic environment get name,variablevalue'])
        
        # T≈±zfal √°llapot
        if any(word in task_lower for word in ['t≈±zfal', 'firewall', 'biztons√°g']):
            commands.extend(['netsh advfirewall show allprofiles', 'netsh firewall show state'])
        
        # HANGER≈ê VEZ√âRL√âS - JAV√çTOTT PowerShell parancsok
        if any(word in task_lower for word in ['hanger≈ë', 'volume', 'hang', 'audio', 'sound', 'ved fel', 'ved le']):
            if 'fel' in task_lower or 'up' in task_lower or 'n√∂vel' in task_lower:
                # Hanger≈ë n√∂vel√©se
                commands.append('powershell.exe -Command "(New-Object -ComObject WScript.Shell).SendKeys([char]175)"')
            elif 'le' in task_lower or 'down' in task_lower or 'cs√∂kkent' in task_lower:
                # Hanger≈ë cs√∂kkent√©se  
                commands.append('powershell.exe -Command "(New-Object -ComObject WScript.Shell).SendKeys([char]174)"')
            elif any(num in task_lower for num in ['0', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100']):
                # Specifikus hanger≈ë be√°ll√≠t√°sa
                import re
                volume_match = re.search(r'(\d+)', task_lower)
                if volume_match:
                    volume = int(volume_match.group(1))
                    # NirCmd alternat√≠v parancs ha el√©rhet≈ë, egy√©bk√©nt WScript
                    volume_steps = volume // 2
                    commands.append(f'powershell.exe -Command "$obj = New-Object -ComObject WScript.Shell; 1..50 | ForEach {{ $obj.SendKeys([char]174) }}; 1..{volume_steps} | ForEach {{ $obj.SendKeys([char]175) }}"')
            else:
                # Alap√©rtelmezett hanger≈ë m≈±veletek
                commands.extend([
                    'powershell.exe -Command "Get-AudioDevice -List"',
                    'powershell.exe -Command "(New-Object -ComObject WScript.Shell).SendKeys([char]175)"'
                ])
        
        # K√âPERNY≈ê F√âNYER≈ê vez√©rl√©s
        if any(word in task_lower for word in ['f√©nyer≈ë', 'brightness', 'f√©ny', 's√∂t√©t', 'vil√°gos']):
            commands.extend([
                'powershell.exe -Command "(Get-WmiObject -Namespace root/WMI -Class WmiMonitorBrightnessMethods).WmiSetBrightness(1,50)"',
                'powershell.exe -Command "Get-WmiObject -Namespace root/WMI -Class WmiMonitorBrightness"'
            ])
        
        # BLUETOOTH eszk√∂z√∂k
        if any(word in task_lower for word in ['bluetooth', 'bt', 'vezet√©k n√©lk√ºli']):
            commands.extend([
                'powershell.exe -Command "Get-PnpDevice | Where-Object {$_.Class -eq \'Bluetooth\'}"',
                'powershell.exe -Command "Get-Service bthserv"'
            ])
        
        # WIFI jelsz√≥ mutat√°s
        if any(word in task_lower for word in ['wifi jelsz√≥', 'wifi password', 'jelszav', 'kulcs']):
            commands.extend([
                'netsh wlan show profiles',
                'powershell.exe -Command "netsh wlan show profiles | Select-String \':\' | ForEach-Object { $name = $_.ToString().Split(\':\')[1].Trim(); netsh wlan show profile name=\\"$name\\" key=clear }"'
            ])
            
        # SISTEMA TELJES√çTM√âNY optimaliz√°l√°s
        if any(word in task_lower for word in ['optimaliz√°l', 'optimize', 'gyors√≠t', 'tiszt√≠t', 'clean']):
            commands.extend([
                'powershell.exe -Command "Get-Process | Sort-Object CPU -Descending | Select-Object -First 10"',
                'sfc /scannow',
                'powershell.exe -Command "Get-WmiObject Win32_StartupCommand | Select-Object Name,Location,Command"'
            ])
        
        return commands[:5]  # Maximum 5 parancs egyszerre

    async def _execute_programming_operations(self, task_description: str):
        """Programoz√°si feladatok v√©grehajt√°sa - k√≥d gener√°l√°s √©s f√°jlba √≠r√°s"""
        print("üíª Programoz√°si feladatok v√©grehajt√°sa...")
        
        # AI-alap√∫ k√≥d gener√°l√°s
        code_content = await self._generate_code_from_description(task_description)
        
        if code_content:
            # F√°jl n√©v gener√°l√°sa a feladat alapj√°n
            filename = self._generate_filename_from_task(task_description)
            
            result = await self.tool_registry.tools['file_writer'].execute(
                path=filename,
                content=code_content
            )
            
            if result and result.get('success'):
                print(f"‚úÖ Program f√°jl l√©trehozva: {result.get('file_path', 'Ismeretlen')}")
                
                # Ha Python f√°jl, pr√≥b√°ljuk meg futtatni
                if filename.endswith('.py'):
                    print("üöÄ Python script futtat√°s pr√≥ba...")
                    
                    # Ellen≈ërizz√ºk, hogy interakt√≠v alkalmaz√°s-e (pygame, tkinter, stb.)
                    is_interactive = await self._is_interactive_application(code_content)
                    
                    if is_interactive:
                        print("üéÆ Interakt√≠v alkalmaz√°s √©szlelve - h√°tt√©rben ind√≠t√°s...")
                        # Interakt√≠v alkalmaz√°sok h√°tt√©rben futtat√°sa
                        import subprocess
                        import os
                        try:
                            # √öj CMD ablakban ind√≠t√°s
                            subprocess.Popen(f'start cmd /k "python {filename}"', shell=True, cwd=os.getcwd())
                            print(f"‚úÖ Interakt√≠v alkalmaz√°s elind√≠tva √∫j ablakban!")
                            print(f"üéØ F√°jl helye: {os.path.abspath(filename)}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è Interakt√≠v alkalmaz√°s ind√≠t√°si hiba: {e}")
                    else:
                        # Norm√°l script futtat√°s
                        run_result = await self.tool_registry.tools['system_command'].execute(
                            command=f"python {filename}"
                        )
                        if run_result and run_result.get('success'):
                            print(f"‚úÖ Script sikeresen futtott!")
                            print(f"üìü Kimenet: {run_result.get('stdout', '')[:200]}...")
                        else:
                            print(f"‚ö†Ô∏è Script futtat√°si hiba: {run_result.get('error', 'Ismeretlen')}")
            else:
                print(f"‚ùå F√°jl l√©trehoz√°si hiba: {result.get('error', 'Ismeretlen hiba')}")
        else:
            print("‚ùå Nem siker√ºlt k√≥dot gener√°lni a feladatb√≥l")

    async def _execute_web_development_operations(self, task_description: str):
        """Webfejleszt√©si feladatok v√©grehajt√°sa"""
        print("üåê Webfejleszt√©si feladatok v√©grehajt√°sa...")
        
        # HTML, CSS, JS f√°jlok gener√°l√°sa
        html_content = await self._generate_html_from_description(task_description)
        css_content = await self._generate_css_from_description(task_description)
        js_content = await self._generate_js_from_description(task_description)
        
        # Weboldal mappa l√©trehoz√°sa
        website_name = self._generate_website_name_from_task(task_description)
        
        # Mappa l√©trehoz√°s parancs
        mkdir_result = await self.tool_registry.tools['system_command'].execute(
            command=f"mkdir {website_name}"
        )
        
        files_created = []
        
        # HTML f√°jl
        if html_content:
            html_result = await self.tool_registry.tools['file_writer'].execute(
                path=f"{website_name}/index.html",
                content=html_content
            )
            if html_result and html_result.get('success'):
                files_created.append("index.html")
        
        # CSS f√°jl
        if css_content:
            css_result = await self.tool_registry.tools['file_writer'].execute(
                path=f"{website_name}/style.css",
                content=css_content
            )
            if css_result and css_result.get('success'):
                files_created.append("style.css")
        
        # JS f√°jl
        if js_content:
            js_result = await self.tool_registry.tools['file_writer'].execute(
                path=f"{website_name}/script.js",
                content=js_content
            )
            if js_result and js_result.get('success'):
                files_created.append("script.js")
        
        if files_created:
            print(f"‚úÖ Weboldal l√©trehozva: {website_name}/")
            print(f"üìÅ F√°jlok: {', '.join(files_created)}")
            
            # Weboldal megnyit√°sa b√∂ng√©sz≈ëben
            open_result = await self.tool_registry.tools['system_command'].execute(
                command=f"start {website_name}/index.html"
            )
            if open_result and open_result.get('success'):
                print("üåê Weboldal megnyitva a b√∂ng√©sz≈ëben!")
        else:
            print("‚ùå Nem siker√ºlt weboldal f√°jlokat l√©trehozni")

    async def _generate_code_from_description(self, task_description: str) -> str:
        """AI-alap√∫ k√≥d gener√°l√°s"""
        print("üß† AI k√≥d gener√°l√°s...")
        
        code_prompt = f"""
Feladat: {task_description}

K√©rlek, √≠rj egy teljes, m≈±k√∂d≈ë Python programot a feladat alapj√°n. 

FONTOS K√ñVETELM√âNYEK:
- A k√≥d legyen teljes √©s r√∂gt√∂n futtathat√≥
- Haszn√°lj megfelel≈ë kommenteket magyarul
- Ha GUI-t haszn√°lsz, el≈ënyben r√©szes√≠tsd a tkinter-t
- A k√≥d legyen j√≥l struktur√°lt √©s olvashat√≥
- Ne haszn√°lj k√ºls≈ë k√∂nyvt√°rakat, csak a Python be√©p√≠tett moduljait

PROGRAMOZ√ÅSI ST√çLUS:
- Haszn√°lj vil√°gos v√°ltoz√≥ neveket
- Minden f√ºggv√©nyt kommentezz
- A main logik√°t tedd if __name__ == "__main__": blokkba

Feladat elemz√©se: {task_description}

V√°laszold meg csak a Python k√≥ddal, semmi m√°s sz√∂veggel:
"""
        
        try:
            response = await self.ai_client.generate_response(
                prompt=code_prompt,
                model=None,
                task_type="programming",
                temperature=0.7,
                max_tokens=2000
            )
            
            # K√≥d tiszt√≠t√°sa - csak a Python k√≥dot tartjuk meg
            code_text = str(response).strip()
            
            # Ha a v√°lasz tartalmazta a ```python blokkot, tiszt√≠tsuk
            if "```python" in code_text:
                start = code_text.find("```python") + 9
                end = code_text.find("```", start)
                if end > start:
                    code_text = code_text[start:end].strip()
            elif "```" in code_text:
                start = code_text.find("```") + 3
                end = code_text.find("```", start)
                if end > start:
                    code_text = code_text[start:end].strip()
            
            print(f"üìù Gener√°lt k√≥d: {len(code_text)} karakter")
            return code_text
            
        except Exception as e:
            print(f"‚ùå K√≥d gener√°l√°si hiba: {e}")
            return ""

    async def _generate_html_from_description(self, task_description: str) -> str:
        """HTML gener√°l√°s weboldal feladatokhoz"""
        html_prompt = f"""
Feladat: {task_description}

K√©rlek, k√©sz√≠ts egy modern, sz√©p HTML oldalt a feladat alapj√°n.

K√ñVETELM√âNYEK:
- Teljes HTML5 strukt√∫ra
- Responsive design
- CSS f√°jl linkel√©se (style.css)
- JavaScript f√°jl linkel√©se (script.js)
- Magyar nyelv≈± tartalom
- Modern, eszt√©tikus megjelen√©s

V√°laszold meg csak a HTML k√≥ddal:
"""
        
        try:
            response = await self.ai_client.generate_response(
                prompt=html_prompt,
                model=None,
                task_type="web_development",
                temperature=0.6,
                max_tokens=1500
            )
            return self._clean_code_response(str(response), "html")
        except:
            # Fallback HTML
            return f"""<!DOCTYPE html>
<html lang="hu">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gener√°lt Weboldal</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header>
        <h1>Automatikusan Gener√°lt Weboldal</h1>
    </header>
    <main>
        <p>Feladat: {task_description}</p>
        <p>Ez az oldal automatikusan lett gener√°lva a Project-S V2 rendszer √°ltal.</p>
    </main>
    <footer>
        <p>L√©trehozva: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    </footer>
    <script src="script.js"></script>
</body>
</html>"""

    async def _generate_css_from_description(self, task_description: str) -> str:
        """CSS gener√°l√°s weboldal feladatokhoz"""
        css_prompt = f"""
Feladat: {task_description}

K√©rlek, √≠rj modern CSS k√≥dot a HTML oldalhoz.

K√ñVETELM√âNYEK:
- Modern, sz√©p design
- Responsive layout
- Sz√≠nes, vonz√≥ megjelen√©s
- Anim√°ci√≥k √©s √°tmenetek
- Mobile-first approach

V√°laszold meg csak a CSS k√≥ddal:
"""
        
        try:
            response = await self.ai_client.generate_response(
                prompt=css_prompt,
                model=None,
                task_type="web_development",
                temperature=0.6,
                max_tokens=1000
            )
            return self._clean_code_response(str(response), "css")
        except:
            # Fallback CSS
            return """* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    color: #333;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
}

header {
    background: rgba(255,255,255,0.9);
    padding: 2rem;
    text-align: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

main {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    background: rgba(255,255,255,0.95);
    border-radius: 10px;
    box-shadow: 0 5px 20px rgba(0,0,0,0.1);
}

footer {
    text-align: center;
    padding: 1rem;
    background: rgba(0,0,0,0.8);
    color: white;
    margin-top: 2rem;
}"""

    async def _generate_js_from_description(self, task_description: str) -> str:
        """JavaScript gener√°l√°s weboldal feladatokhoz"""
        return """// Automatikusan gener√°lt JavaScript
document.addEventListener('DOMContentLoaded', function() {
    console.log('Weboldal bet√∂ltve!');
    
    // Egyszer≈± anim√°ci√≥
    const main = document.querySelector('main');
    if (main) {
        main.style.opacity = '0';
        main.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            main.style.transition = 'all 0.5s ease';
            main.style.opacity = '1';
            main.style.transform = 'translateY(0)';
        }, 100);
    }
});"""

    def _generate_filename_from_task(self, task_description: str) -> str:
        """F√°jln√©v gener√°l√°s feladat alapj√°n"""
        import re
        
        # Alapvet≈ë szavak kigy≈±jt√©se
        task_lower = task_description.lower()
        
        if "j√°t√©k" in task_lower or "game" in task_lower:
            if "k√≠gy√≥" in task_lower or "snake" in task_lower:
                return "snake_game.py"
            elif "tetris" in task_lower:
                return "tetris_game.py"
            else:
                return "game.py"
        elif "sz√°mol√≥g√©p" in task_lower or "calculator" in task_lower:
            return "calculator.py"
        elif "chat" in task_lower or "besz√©lget" in task_lower:
            return "chatbot.py"
        else:
            # √Åltal√°nos n√©v gener√°l√°s
            safe_name = re.sub(r'[^\w\s]', '', task_lower)
            safe_name = re.sub(r'\s+', '_', safe_name)[:20]
            return f"{safe_name or 'generated_program'}.py"

    def _generate_website_name_from_task(self, task_description: str) -> str:
        """Weboldal mappa n√©v gener√°l√°s"""
        import re
        safe_name = re.sub(r'[^\w\s]', '', task_description.lower())
        safe_name = re.sub(r'\s+', '_', safe_name)[:15]
        return f"{safe_name or 'website'}_{datetime.now().strftime('%H%M%S')}"

    async def _is_interactive_application(self, code_content: str) -> bool:
        """Ellen≈ërzi, hogy a k√≥d interakt√≠v alkalmaz√°s-e (pygame, tkinter, stb.)"""
        interactive_keywords = [
            'pygame', 'tkinter', 'turtle', 'matplotlib.pyplot', 'cv2.imshow',
            'input()', 'game_loop', 'while True:', 'mainloop()', 'pygame.display',
            'cv2.waitKey', 'plt.show()', 'root.mainloop', 'screen.fill'
        ]
        
        code_lower = code_content.lower()
        
        # Ha b√°rmelyik interakt√≠v kulcssz√≥t tartalmazza
        for keyword in interactive_keywords:
            if keyword.lower() in code_lower:
                return True
        
        # Tov√°bbi ellen≈ërz√©sek - import-ok alapj√°n
        import_lines = [line for line in code_content.split('\n') if line.strip().startswith('import ') or line.strip().startswith('from ')]
        interactive_imports = ['pygame', 'tkinter', 'turtle', 'matplotlib', 'cv2']
        
        for line in import_lines:
            for imp in interactive_imports:
                if imp in line.lower():
                    return True
        
        return False

    async def _execute_web_scraping_operations(self, task_description: str):
        """Web scraping m≈±veletek v√©grehajt√°sa - ARCHAEOLOGICAL TREASURE!"""
        print("üåê Web scraping m≈±veletek v√©grehajt√°sa...")
        print("üè∫ Archaeological web tools activated!")
        
        # AI-alap√∫ URL √©s selector gener√°l√°s
        scraping_config = await self._generate_scraping_config_from_description(task_description)
        
        if scraping_config:
            # Web scraping v√©grehajt√°sa
            result = await self.tool_registry.tools['web_scraper'].execute(scraping_config)
            
            if result and result.get('success'):
                print(f"‚úÖ Web scraping sikeres!")
                print(f"üìä Adatok sz√°ma: {result.get('items_scraped', 0)}")
                print(f"üìÅ Kimeneti f√°jl: {result.get('output_file', 'N/A')}")
                
                # Ha van adatf√°jl, elemz√©s ind√≠t√°sa
                if result.get('output_file'):
                    print("üîç Automatikus adatelemz√©s ind√≠t√°sa...")
                    
                    analysis_result = await self.tool_registry.tools['web_analyzer'].execute({
                        'data_file': result.get('output_file'),
                        'analysis_type': 'content'
                    })
                    
                    if analysis_result and analysis_result.get('success'):
                        print(f"‚úÖ Web elemz√©s k√©sz!")
                        print(f"üìã Elemz√©si jelent√©s: {analysis_result.get('report_file', 'N/A')}")
                    
            else:
                print(f"‚ùå Web scraping hiba: {result.get('error', 'Ismeretlen hiba')}")
        else:
            print("‚ùå Nem siker√ºlt scraping konfigur√°ci√≥t gener√°lni")

    async def _generate_scraping_config_from_description(self, task_description: str) -> dict:
        """AI-alap√∫ scraping konfigur√°ci√≥ gener√°l√°s"""
        print("üß† AI scraping konfigur√°ci√≥ gener√°l√°s...")
        
        scraping_prompt = f"""
Feladat: {task_description}

Te egy professzion√°lis web scraping szak√©rt≈ë vagy. A felhaszn√°l√≥ le√≠r√°sa alapj√°n gener√°lj web scraping konfigur√°ci√≥t.

P√âLDA FELADATOK √âS KONFIGUR√ÅCI√ìK:

1. "Monitor news about AI" ‚Üí 
{{
    "url": "https://news.ycombinator.com",
    "selectors": {{
        "container": ".athing",
        "title": ".storylink",
        "score": ".score"
    }},
    "output_format": "json"
}}

2. "Track prices from e-commerce" ‚Üí
{{
    "url": "https://example-store.com/products",
    "selectors": {{
        "container": ".product",
        "title": ".product-title",
        "price": ".price"
    }},
    "output_format": "csv"
}}

3. "Extract contact information" ‚Üí
{{
    "url": "https://company-website.com/contact",
    "selectors": {{
        "email": "a[href^='mailto:']",
        "phone": "a[href^='tel:']",
        "address": ".address"
    }},
    "output_format": "json"
}}

FONTOS SZAB√ÅLYOK:
- Csak NYILV√ÅNOS weboldalakat haszn√°lj
- Respekt√°ld a robots.txt f√°jlokat
- Ne gener√°lj priv√°t vagy v√©dett tartalmakat
- Haszn√°lj val√≥s, el√©rhet≈ë URL-eket

V√°laszold meg JSON form√°tumban:
{{
    "url": "target_website_url",
    "selectors": {{
        "field_name": "css_selector"
    }},
    "output_format": "json",
    "delay": 1
}}

Feladat elemz√©se: {task_description}
"""
        
        try:
            ai_response = await self.ai_client.generate_response(
                prompt=scraping_prompt,
                model=None,
                task_type="web_scraping",
                temperature=0.3,
                max_tokens=500
            )
            
            print(f"ü§ñ AI v√°lasz: {str(ai_response)[:150]}...")
            
            # JSON kinyer√©se a v√°laszb√≥l - JAV√çTOTT VERZI√ì
            import json
            import re
            
            # T√∂bbf√©le JSON form√°tum kezel√©se
            response_text = str(ai_response)
            parsed_config = None
            
            # 1. Pr√≥ba: Clean JSON extraction
            json_patterns = [
                r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}',  # Nested JSON pattern
                r'\{.*?\}',  # Simple JSON pattern
                r'```json\s*(\{.*?\})\s*```',  # Markdown code block
                r'```\s*(\{.*?\})\s*```'  # Generic code block
            ]
            
            for pattern in json_patterns:
                json_match = re.search(pattern, response_text, re.DOTALL)
                if json_match:
                    try:
                        json_text = json_match.group(1) if json_match.lastindex else json_match.group()
                        # Clean common issues
                        json_text = json_text.strip()
                        json_text = re.sub(r',\s*}', '}', json_text)  # Remove trailing commas
                        json_text = re.sub(r',\s*]', ']', json_text)  # Remove trailing commas in arrays
                        
                        parsed_config = json.loads(json_text)
                        print(f"‚úÖ JSON sikeresen feldolgozva pattern: {pattern[:20]}...")
                        break
                    except json.JSONDecodeError as e:
                        print(f"‚ö†Ô∏è JSON parse hiba pattern {pattern[:20]}...: {e}")
                        continue
            
            if parsed_config:
                    
                    # Biztons√°gi ellen≈ërz√©sek
                    url = parsed_config.get('url', '')
                    if self._is_safe_scraping_url(url):
                        print(f"‚úÖ Biztons√°gos scraping URL: {url}")
                        return parsed_config
                    else:
                        print(f"‚ö†Ô∏è Kock√°zatos URL elutas√≠tva: {url}")
                        return self._fallback_scraping_config(task_description)
            else:
                print("‚ùå Nem siker√ºlt JSON-t kinyerni az AI v√°laszb√≥l")
            
            # Fallback: Alap√©rtelmezett konfigur√°ci√≥
            return self._fallback_scraping_config(task_description)
            
        except Exception as e:
            print(f"‚ùå AI scraping konfigur√°ci√≥ hiba: {e}")
            return self._fallback_scraping_config(task_description)
    
    def _is_safe_scraping_url(self, url: str) -> bool:
        """Ellen≈ërzi, hogy biztons√°gos-e a scraping URL"""
        safe_domains = [
            'example.com', 'httpbin.org', 'jsonplaceholder.typicode.com',
            'news.ycombinator.com', 'reddit.com', 'github.com'
        ]
        
        # Alap√©rtelmezett safe URLs tesztel√©shez
        return any(domain in url.lower() for domain in safe_domains) or url.startswith('https://')
    
    def _fallback_scraping_config(self, task_description: str) -> dict:
        """Fallback scraping konfigur√°ci√≥ gener√°l√°s - JAV√çTOTT"""
        print("üîÑ Fallback scraping konfigur√°ci√≥ haszn√°lata...")
        
        # Feladat t√≠pus alap√∫ URL v√°laszt√°s
        if any(word in task_description.lower() for word in ['h√≠rek', 'news', 'cikkek', '√∫js√°g']):
            return {
                "url": "https://news.ycombinator.com",
                "selectors": {
                    "container": ".athing",
                    "title": ".storylink"
                },
                "output_format": "json",
                "delay": 2
            }
        elif any(word in task_description.lower() for word in ['github', 'repo', 'project']):
            return {
                "url": "https://github.com/trending",
                "selectors": {
                    "container": ".Box-row",
                    "title": "h1 a"
                },
                "output_format": "json",
                "delay": 2
            }
        else:
            # Alap√©rtelmezett biztons√°gos teszt URL
            return {
                "url": "https://jsonplaceholder.typicode.com/posts",
                "selectors": {},  # Alap√©rtelmezett extraction
                "output_format": "json",
                "delay": 1
            }
    
    async def _execute_browser_automation_operations(self, task_description: str):
        """Browser automation m≈±veletek v√©grehajt√°sa - VAL√ìDI B√ñNG√âSZ≈ê HASZN√ÅLAT"""
        print("üåê Browser automation m≈±veletek v√©grehajt√°sa...")
        
        try:
            # Ellen≈ërizz√ºk, hogy van-e browser automation tool
            if 'browser_automation' not in self.tool_registry.tools:
                print("‚ö†Ô∏è Browser automation tool nem el√©rhet≈ë")
                # Fallback to command execution
                await self._execute_command_operations(task_description)
                return
            
            browser_tool = self.tool_registry.tools['browser_automation']
            
            # AI-alap√∫ task el≈ëk√©sz√≠t√©se - JAV√çTOTT VERZI√ì
            task_analysis_prompt = f"""
Feladat: {task_description}

K√©rlek, elemezd ezt a b√∂ng√©sz≈ë automatiz√°l√°si feladatot √©s add meg egy TELJES, R√âSZLETES utas√≠t√°sk√©nt angol nyelven, amely MINDEN l√©p√©st tartalmaz:

P√©ld√°k:
- "nyisd meg a googlet √©s keress mese hangosk√∂nyvet" ‚Üí "Navigate to google.com, search for fairy tale audiobooks, and browse the results"
- "menj a gmail-re √©s √≠rj egy emailt" ‚Üí "Navigate to gmail.com, compose a new email with subject and content, and send it"
- "l√©pj a gmail-re √©s k√ºld egy levelet zsoltszupnak, egy vicces emailt" ‚Üí "Navigate to gmail.com, compose a new email to zsoltszup@example.com with a funny subject and funny content, then send the email"

FONTOS: NE egyszer≈±s√≠tsd le a feladatot! Tartsd meg az √ñSSZES r√©szletet √©s l√©p√©st!

V√°lasz csak a TELJES angol utas√≠t√°ssal:
"""
            
            processed_task = await self.ai_client.generate_response(
                prompt=task_analysis_prompt,
                model=None,  # Use default model instead of invalid qwen3-235b
                task_type="general",
                temperature=0.3,
                max_tokens=100
            )
            
            if processed_task:
                # Clean the response - remove <think> blocks and extract only the task
                processed_task = str(processed_task).strip()
                
                # Remove <think> blocks completely
                import re
                processed_task = re.sub(r'<think>.*?</think>', '', processed_task, flags=re.DOTALL)
                
                # Also remove any remaining <think> tags without closing tags
                processed_task = re.sub(r'<think>.*', '', processed_task, flags=re.DOTALL)
                
                # Clean up extra whitespace
                processed_task = processed_task.strip()
                
                # Extract the final task instruction
                if processed_task:
                    lines = processed_task.split('\n')
                    for line in lines:
                        line = line.strip()
                        if line and not line.startswith('#') and len(line) > 10:
                            processed_task = line.strip().strip('"')
                            break
                
                # If still empty after cleaning, use fallback
                if not processed_task or processed_task.startswith('<think'):
                    processed_task = None
                
                print(f"ü§ñ Feldolgozott task: {processed_task}")
            
            # Use fallback if processing failed
            if not processed_task:
                # Fallback task - preserve original intent
                if "google" in task_description.lower():
                    processed_task = f"Navigate to google.com and perform: {task_description}"
                elif "gmail" in task_description.lower():
                    processed_task = f"Navigate to gmail.com and perform: {task_description}"
                else:
                    processed_task = f"Navigate to website and perform task: {task_description}"
                print(f"üîÑ Fallback task haszn√°lata: {processed_task}")
            
            # Browser automation v√©grehajt√°sa
            print(f"üåê Browser task v√©grehajt√°sa: {processed_task}")
            
            result = await browser_tool.execute(
                task=processed_task,
                headless=False,  # Vizu√°lis b√∂ng√©sz≈ë
                timeout=120,     # 2 perc timeout
                screenshot=True, # Screenshot k√©sz√≠t√©se
                wait_time=2      # V√°r√°s az akci√≥k k√∂z√∂tt
            )
            
            if result and result.get('success'):
                print(f"‚úÖ Browser automation sikeres!")
                print(f"   üéØ Task: {processed_task}")
                print(f"   ‚è±Ô∏è Id≈ëtartam: {result.get('execution_time', 0):.2f}s")
                
                if result.get('screenshot'):
                    print(f"   üì∏ Screenshot: {result.get('screenshot')}")
                
                # Initialize extracted data
                extracted = result.get('extracted_data', {})
                if extracted:
                    print(f"   üìÑ Oldal c√≠m: {extracted.get('title', 'N/A')}")
                    print(f"   üîó URL: {extracted.get('url', 'N/A')}")
                
                # Eredm√©ny dokument√°l√°sa
                browser_content = f"""# Browser Automation Jelent√©s

**Feladat:** {task_description}
**V√©grehajtva:** {datetime.now()}
**Feldolgozott task:** {processed_task}

## V√©grehajt√°si Eredm√©ny
‚úÖ **Sikeresen v√©grehajtva** ({result.get('execution_time', 0):.2f}s)

### R√©szletek
- **URL:** {extracted.get('url', 'N/A')}
- **Oldal c√≠m:** {extracted.get('title', 'N/A')}
- **Screenshot:** {result.get('screenshot', 'Nem k√©sz√ºlt')}

### Browser Automation Eredm√©ny
```
{result.get('result', 'Nincs specifikus eredm√©ny')}
```

## √ñsszefoglal√°s
A browser automation sikeresen lefutott. A feladat v√©grehajt√°sa sor√°n a b√∂ng√©sz≈ë val√≥di weboldalt nyitott meg √©s interakci√≥kat hajtott v√©gre.
"""
                
                file_result = await self.tool_registry.tools['file_writer'].execute(
                    path=f"browser_automation_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                    content=browser_content
                )
                
                if file_result and file_result.get('success'):
                    print(f"‚úÖ Browser automation jelent√©s l√©trehozva: {file_result.get('file_path', 'Ismeretlen')}")
            
            else:
                print(f"‚ùå Browser automation sikertelen: {result.get('error', 'Ismeretlen hiba')}")
                # Create error report
                error_content = f"""# Browser Automation Hiba Jelent√©s

**Feladat:** {task_description}
**V√©grehajtva:** {datetime.now()}
**Feldolgozott task:** {processed_task}

## Hiba R√©szletei
‚ùå **Sikertelen v√©grehajt√°s**

### Hiba inform√°ci√≥
```
{result.get('error', 'Ismeretlen hiba') if result else 'Nincs v√°lasz a browser automation tool-t√≥l'}
```

## K√∂vetkez≈ë l√©p√©sek
A browser automation sikertelen volt. Fallback m√≥dra v√°lt√°s parancssori v√©grehajt√°sra.
"""
                
                try:
                    error_file_result = await self.tool_registry.tools['file_writer'].execute(
                        path=f"browser_automation_error_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                        content=error_content
                    )
                    if error_file_result and error_file_result.get('success'):
                        print(f"üìù Hiba jelent√©s l√©trehozva: {error_file_result.get('file_path', 'Ismeretlen')}")
                except Exception as report_error:
                    print(f"‚ö†Ô∏è Hiba jelent√©s l√©trehoz√°sa sikertelen: {report_error}")
                
                # Fallback to command execution
                await self._execute_command_operations(task_description)
        
        except Exception as e:
            print(f"‚ùå Browser automation hiba: {e}")
            import traceback
            traceback.print_exc()
            # Fallback to command execution
            await self._execute_command_operations(task_description)


async def main():
    """F≈ëprogram - interakt√≠v men√º a tesztel√©shez"""
    print("üöÄ PROJECT-S V2 SIMPLIFIED - KOMPLEX FELADAT TESZTEL≈ê")
    print("=" * 60)
    
    processor = ComplexTaskProcessor()
    
    while True:
        print("\nüéØ TESZTEL√âSI OPCI√ìK:")
        print("1. üêõ Challenge 1: Bug Fix + Unit Test")
        print("2. üîß Challenge 2: CLI Tool l√©trehoz√°sa")
        print("3. üåê Challenge 3: Web Scraping + Data Processing")
        print("4. üåê Browser Automation Teszt (Gmail)")
        print("5. üíª Egy√©ni feladat bevitele")
        print("0. üö™ Kil√©p√©s")
        
        try:
            choice = input("\nüìù V√°lassz opci√≥t (0-5): ").strip()
            
            if choice == "0":
                print("üëã Viszl√°t!")
                break
            elif choice == "1":
                print("\nüêõ CHALLENGE 1: Bug Fix + Unit Test")
                task = "Find and fix the bug in this Python calculator function, then write unit tests for it: def divide(a, b): return a / b"
                await processor.process_natural_language_task(task)
            elif choice == "2":
                print("\nüîß CHALLENGE 2: CLI Tool l√©trehoz√°sa")
                task = "Create a command-line weather checker tool that takes a city name and displays current weather information"
                await processor.process_natural_language_task(task)
            elif choice == "3":
                print("\nüåê CHALLENGE 3: Web Scraping + Data Processing")
                task = "Scrape the latest trending repositories from GitHub and create a summary report with the most popular programming languages"
                await processor.process_natural_language_task(task)
            elif choice == "4":
                print("\nüåê BROWSER AUTOMATION TESZT")
                task = "l√©pj a gmail-re √©s k√ºld egy levelet zsoltszupnak, egy vicces emailt"
                await processor.process_natural_language_task(task)
            elif choice == "5":
                print("\nüíª EGY√âNI FELADAT")
                custom_task = input("üìù √çrd be a feladatot: ").strip()
                if custom_task:
                    await processor.process_natural_language_task(custom_task)
                else:
                    print("‚ö†Ô∏è √úres feladat!")
            else:
                print("‚ùå √ârv√©nytelen v√°laszt√°s!")
                
        except KeyboardInterrupt:
            print("\n\nüëã Kil√©p√©s...")
            break
        except Exception as e:
            print(f"‚ùå Hiba: {e}")


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
